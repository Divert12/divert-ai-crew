"""
√âquipe CrewAI pour g√©n√©rer un pitch marketing complet pour Divert.ai
Version am√©lior√©e avec support du param√®tre topic
"""

from crewai import Agent, Task, Crew, Process
from crewai_tools import SerperDevTool
from langchain_huggingface import HuggingFaceEndpoint
import os
from typing import Dict, Any, Optional


# Configuration du mod√®le
MODEL = "mistralai/Mixtral-8x7B-Instruct-v0.1"
HF_TOKEN = os.getenv("HF_TOKEN")

# Configuration du LLM
llm = HuggingFaceEndpoint(
    repo_id=MODEL,
    temperature=0.7,
    max_new_tokens=1024,
    huggingfacehub_api_token=HF_TOKEN
)

# Outil de recherche
search_tool = SerperDevTool()

def create_problem_finder_agent():
    """Agent pour identifier les probl√®mes actuels des entreprises"""
    return Agent(
        role="Problem Finder - Analyste des d√©fis entreprise",
        goal="Identifier 3-5 probl√®mes concrets que rencontrent les entreprises et particuliers dans leur domaine sp√©cifique, en se concentrant sur la productivit√©, gestion, automatisation et complexit√© des outils digitaux.",
        backstory="""Tu es un consultant exp√©riment√© qui a travaill√© avec des centaines d'entreprises de toutes tailles. 
        Tu comprends parfaitement les d√©fis op√©rationnels auxquels font face les PME, freelances et √©quipes.
        Ta sp√©cialit√© est d'identifier les vrais probl√®mes qui freinent la productivit√© au quotidien dans des secteurs sp√©cifiques.""",
        verbose=True,
        allow_delegation=False,
        tools=[search_tool],
        llm=llm
    )

def create_solution_presenter_agent():
    """Agent pour pr√©senter la solution Divert.ai"""
    return Agent(
        role="Solution Presenter - Expert produit Divert.ai",
        goal="Expliquer comment Divert.ai r√©sout concr√®tement les probl√®mes identifi√©s gr√¢ce √† ses √©quipes d'agents IA pr√©construits et son interface accessible, en adaptant le message au domaine sp√©cifique.",
        backstory="""Tu es le directeur produit de Divert.ai et tu ma√Ætrises parfaitement la valeur ajout√©e du service.
        Tu sais comment transformer les d√©fis business en opportunit√©s gr√¢ce √† l'IA accessible.
        Tu excelles √† expliquer des concepts techniques de mani√®re simple et convaincante, en adaptant ton discours √† diff√©rents secteurs.""",
        verbose=True,
        allow_delegation=False,
        llm=llm
    )

def create_marketing_advisor_agent():
    """Agent pour proposer des strat√©gies marketing"""
    return Agent(
        role="Marketing Advisor - Strat√®ge acquisition",
        goal="Proposer des astuces marketing innovantes et efficaces pour attirer les premiers utilisateurs dans le secteur cibl√© et les fid√©liser.",
        backstory="""Tu es un growth hacker exp√©riment√© qui a lanc√© plusieurs startups B2B avec succ√®s.
        Tu connais parfaitement les strat√©gies pour acqu√©rir rapidement des PME, freelances et √©quipes dans diff√©rents secteurs.
        Tu privil√©gies les approches simples, √† faible co√ªt et √† fort impact, adapt√©es au march√© cible.""",
        verbose=True,
        allow_delegation=False,
        tools=[search_tool],
        llm=llm
    )

def create_pitch_synthesizer_agent():
    """Agent pour synth√©tiser le pitch final"""
    return Agent(
        role="Pitch Synthesizer - R√©dacteur commercial",
        goal="Compiler tous les √©l√©ments en un pitch final fluide, clair et impactant pr√™t √† √™tre pr√©sent√©, adapt√© au secteur et public cible.",
        backstory="""Tu es un r√©dacteur commercial expert qui a cr√©√© des centaines de pitches gagnants.
        Tu ma√Ætrises l'art de structurer un discours commercial qui capte l'attention et convainc.
        Tu sais comment √©quilibrer professionnalisme, optimisme et accessibilit√© tout en personnalisant le message.""",
        verbose=True,
        allow_delegation=False,
        llm=llm
    )

def create_problem_identification_task(agent, topic: str):
    """T√¢che d'identification des probl√®mes adapt√©e au topic"""
    return Task(
        description=f"""Identifie 3 √† 5 probl√®mes concrets et actuels que rencontrent les entreprises (PME, freelances, √©quipes) 
        dans le secteur/domaine suivant : {topic}
        
        Focus sur :
        - Probl√®mes de productivit√© sp√©cifiques √† ce domaine
        - Difficult√©s de gestion particuli√®res au secteur
        - Manque d'automatisation dans ces activit√©s
        - Complexit√© des outils digitaux utilis√©s
        
        Pour chaque probl√®me :
        1. Donne un titre clair et sp√©cifique au domaine
        2. Explique bri√®vement pourquoi c'est un vrai frein dans ce secteur
        3. Quantifie l'impact si possible (temps perdu, co√ªt, frustration)
        
        Utilise des recherches r√©centes pour valider la pertinence de ces probl√®mes dans le contexte de : {topic}""",
        expected_output=f"Liste de 3-5 probl√®mes sp√©cifiques au domaine '{topic}' avec titre, description, et impact quantifi√©",
        agent=agent
    )

def create_solution_presentation_task(agent, topic: str):
    """T√¢che de pr√©sentation de la solution adapt√©e au topic"""
    return Task(
        description=f"""En te basant sur les probl√®mes identifi√©s dans le domaine '{topic}', explique comment Divert.ai apporte une solution unique.
        
        Mets en avant que Divert.ai propose :
        - Des √©quipes d'agents IA pr√©construits adapt√©es aux besoins du secteur '{topic}'
        - Une interface tr√®s accessible (m√™me pour les non-techniques dans ce domaine)
        - Une r√©duction significative du travail manuel sp√©cifique √† ce secteur
        - Un gain d'efficacit√© mesurable pour les activit√©s de '{topic}'
        
        R√©dige un paragraphe convaincant qui pourrait servir de pitch marketing principal pour le secteur '{topic}'.
        Utilise un ton professionnel mais accessible, √©vite le jargon technique, et utilise des exemples concrets li√©s √† '{topic}'.""",
        expected_output=f"Pitch marketing principal expliquant la solution Divert.ai adapt√©e au secteur '{topic}' de mani√®re convaincante",
        agent=agent
    )

def create_marketing_strategy_task(agent, topic: str):
    """T√¢che de strat√©gie marketing adapt√©e au topic"""
    return Task(
        description=f"""Propose une strat√©gie marketing compl√®te pour Divert.ai ciblant le secteur '{topic}' :
        
        1. UNE astuce marketing simple et innovante pour attirer les premiers utilisateurs dans le domaine '{topic}'
        2. UN conseil concret pour fid√©liser ces utilisateurs sp√©cifiques au secteur
        3. Focus sur les PME, freelances et √©quipes du secteur '{topic}'
        4. Valorise la simplicit√© et l'innovation du service pour ce domaine particulier
        
        Recherche les derni√®res tendances marketing B2B sp√©cifiques au secteur '{topic}' pour inspirer tes recommandations.
        Privil√©gie les approches √† faible co√ªt et fort impact adapt√©es aux acteurs de '{topic}'.""",
        expected_output=f"Strat√©gie marketing sp√©cifique au secteur '{topic}' avec astuce d'acquisition et conseil de fid√©lisation",
        agent=agent
    )

def create_pitch_synthesis_task(agent, topic: str):
    """T√¢che de synth√®se du pitch final adapt√©e au topic"""
    return Task(
        description=f"""Compile tous les √©l√©ments pr√©c√©dents en un pitch final professionnel et impactant pour le secteur '{topic}'.
        
        Structure du pitch :
        1. **Accroche** : Introduis le sujet en mentionnant le secteur '{topic}' de mani√®re captivante
        2. **Probl√®mes** : Pr√©sente les probl√®mes r√©els identifi√©s dans le domaine '{topic}'
        3. **Solution** : Explique comment Divert.ai r√©sout ces probl√®mes sp√©cifiques
        4. **Diff√©renciation** : Pourquoi Divert.ai est unique pour le secteur '{topic}'
        5. **Strat√©gie** : Astuce marketing pour l'acquisition dans ce domaine
        6. **Conclusion** : Appel √† l'action engageant adapt√© au public de '{topic}'
        
        Le pitch doit √™tre :
        - Fluide et naturel √† lire
        - Professionnel mais accessible aux acteurs de '{topic}'
        - Optimiste et engageant
        - Pr√™t √† √™tre pr√©sent√© directement √† des prospects du secteur '{topic}'
        - Contenir des exemples concrets et du vocabulaire adapt√© au domaine
        
        Longueur : 300-500 mots maximum.""",
        expected_output=f"Pitch final structur√© et pr√™t √† √™tre pr√©sent√© pour le secteur '{topic}' (300-500 mots)",
        agent=agent
    )

def run_crew(topic: Optional[str] = None, **inputs) -> Dict[str, Any]:
    """
    Fonction principale pour ex√©cuter l'√©quipe CrewAI
    
    Args:
        topic: Le secteur/domaine pour lequel cr√©er le pitch marketing
        **inputs: Autres param√®tres d'entr√©e (pour compatibilit√©)
        
    Returns:
        Dict contenant le r√©sultat de l'ex√©cution
    """
    
    # Utiliser un topic par d√©faut si aucun n'est fourni
    if not topic:
        topic = "intelligence artificielle et automatisation"
    
    # Log du topic utilis√©
    print(f"üéØ G√©n√©ration d'un pitch marketing pour le secteur : {topic}")
    
    # Cr√©er les agents
    problem_finder = create_problem_finder_agent()
    solution_presenter = create_solution_presenter_agent()
    marketing_advisor = create_marketing_advisor_agent()
    pitch_synthesizer = create_pitch_synthesizer_agent()
    
    # Cr√©er les t√¢ches avec le topic
    problem_task = create_problem_identification_task(problem_finder, topic)
    solution_task = create_solution_presentation_task(solution_presenter, topic)
    marketing_task = create_marketing_strategy_task(marketing_advisor, topic)
    pitch_task = create_pitch_synthesis_task(pitch_synthesizer, topic)
    
    # D√©finir les d√©pendances entre t√¢ches
    solution_task.context = [problem_task]
    marketing_task.context = [problem_task, solution_task]
    pitch_task.context = [problem_task, solution_task, marketing_task]
    
    # Cr√©er l'√©quipe
    crew = Crew(
        agents=[problem_finder, solution_presenter, marketing_advisor, pitch_synthesizer],
        tasks=[problem_task, solution_task, marketing_task, pitch_task],
        process=Process.sequential,
        verbose=2
    )
    
    # Ex√©cuter l'√©quipe
    try:
        result = crew.kickoff()
        
        return {
            "success": True,
            "pitch": result,
            "message": f"Pitch marketing g√©n√©r√© avec succ√®s pour le secteur '{topic}'",
            "topic_used": topic,
            "agents_used": 4,
            "tasks_completed": 4
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "message": f"Erreur lors de la g√©n√©ration du pitch pour '{topic}'",
            "topic_used": topic
        }

if __name__ == "__main__":
    # Test de l'√©quipe avec un topic par d√©faut
    result = run_crew("applications mobiles de fitness")
    print("=== R√âSULTAT DE L'√âQUIPE DIVERT.AI MARKETING ===")
    print(result)