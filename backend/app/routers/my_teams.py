# backend/app/routers/my_teams.py
"""
Routeur pour la gestion des √©quipes de l'utilisateur
"""

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
from uuid import UUID
import logging

from app.database.database import get_db
from app.schemas.team_instance import TeamInstanceCreate, TeamInstanceResponse, CrewInput
from app.crud.team_instance import (
    get_user_team_instances,
    create_team_instance,
    get_team_instance_by_id,
    update_team_instance_execution,
    check_user_has_crew
)
from app.crud.crew import get_crew_by_id
from app.core.security import get_current_user
from app.services.crew_executor import CrewExecutorService

logger = logging.getLogger(__name__)
router = APIRouter()

@router.get("/")
async def get_my_teams(
    skip: int = 0,
    limit: int = 50,
    db: Session = Depends(get_db),
    current_user: dict = Depends(get_current_user),
):
    """
    R√©cup√®re toutes les √©quipes et workflows de l'utilisateur connect√©
    """
    try:
        logger.info(f"üìã R√©cup√©ration des √©quipes/workflows pour l'utilisateur {current_user['username']}")
        
        from app.models.team_instance import TeamInstance
        from app.models.crew import Crew
        from app.models.workflow import Workflow
        
        # R√©cup√©rer toutes les instances de l'utilisateur
        instances = db.query(TeamInstance).filter(
            TeamInstance.user_id == current_user["id"],
            TeamInstance.is_active == True
        ).offset(skip).limit(limit).all()
        
        result = []
        for instance in instances:
            instance_data = {
                "id": instance.id,
                "name": instance.name,
                "is_active": instance.is_active,
                "created_at": instance.created_at.isoformat(),
                "last_executed": instance.last_executed.isoformat() if instance.last_executed else None
            }
            
            # Si c'est un crew
            if instance.crew_id:
                crew = db.query(Crew).filter(Crew.id == instance.crew_id).first()
                if crew:
                    instance_data.update({
                        "crew": {
                            "id": crew.id,
                            "name": crew.name,
                            "description": crew.description,
                            "category": crew.category,
                            "folder_name": crew.folder_name
                        },
                        "type": "crew"
                    })
            
            # Si c'est un workflow
            elif instance.workflow_id:
                workflow = db.query(Workflow).filter(Workflow.id == instance.workflow_id).first()
                if workflow:
                    instance_data.update({
                        "workflow": {
                            "id": workflow.id,
                            "name": workflow.name,
                            "description": workflow.description,
                            "category": workflow.category,
                            "folder_name": workflow.folder_name
                        },
                        "type": "workflow"
                    })
            
            result.append(instance_data)
        
        logger.info(f"‚úÖ {len(result)} √©quipes/workflows trouv√©es pour {current_user['username']}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des √©quipes: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration des √©quipes"
        )

@router.post("/add-crew", response_model=TeamInstanceResponse)
async def add_crew_to_my_teams(
    team_data: TeamInstanceCreate,
    current_user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Ajoute une √©quipe du store aux √©quipes de l'utilisateur

    Args:
        team_data: Donn√©es de l'instance √† cr√©er (crew_id, custom_name)
        current_user: Utilisateur connect√©
        db: Session de base de donn√©es

    Returns:
        TeamInstance cr√©√©e

    Raises:
        HTTPException: Si l'√©quipe n'existe pas dans le store ou si l'utilisateur l'a d√©j√†
    """
    try:
        logger.info(f"üë§ Utilisateur {current_user['username']} ajoute l'√©quipe {team_data.crew_id}")
        
        # V√©rifier si l'√©quipe existe dans le store
        crew = get_crew_by_id(db, team_data.crew_id)
        if not crew:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="√âquipe non trouv√©e dans le store"
            )

        # V√©rifier si l'utilisateur a d√©j√† ajout√© cette √©quipe
        if check_user_has_crew(db, current_user["id"], team_data.crew_id):
            raise HTTPException(
                status_code=status.HTTP_409_CONFLICT,
                detail="Cette √©quipe est d√©j√† dans vos √©quipes"
            )

        # Cr√©er l'instance de l'√©quipe pour l'utilisateur
        new_team_instance = create_team_instance(db, team_data, current_user["id"])
        
        logger.info(f"‚úÖ √âquipe {crew.name} ajout√©e avec succ√®s pour {current_user['username']}")
        
        return new_team_instance
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ajout de l'√©quipe: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de l'ajout de l'√©quipe"
        )

@router.post("/add-workflow")
async def add_workflow_to_my_teams(
    workflow_data: dict,
    current_user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Ajoute un workflow du store aux workflows de l'utilisateur
    """
    try:
        workflow_id = workflow_data.get("workflow_id")
        logger.info(f"üë§ Utilisateur {current_user['username']} ajoute le workflow {workflow_id}")
        
        # V√©rifier si le workflow existe dans le store
        from app.models.workflow import Workflow
        workflow = db.query(Workflow).filter(Workflow.id == workflow_id).first()
        if not workflow:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Workflow non trouv√© dans le store"
            )

        # V√©rifier si l'utilisateur a d√©j√† ajout√© ce workflow
        from app.models.team_instance import TeamInstance
        existing = db.query(TeamInstance).filter(
            TeamInstance.user_id == current_user["id"],
            TeamInstance.workflow_id == workflow_id,
            TeamInstance.is_active == True
        ).first()
        
        if existing:
            raise HTTPException(
                status_code=status.HTTP_409_CONFLICT,
                detail="Ce workflow est d√©j√† dans vos workflows"
            )

        # Cr√©er l'instance de workflow pour l'utilisateur
        new_workflow_instance = TeamInstance(
            user_id=current_user["id"],
            workflow_id=workflow_id,
            name=workflow_data.get("name", workflow.name),
            is_active=True
        )
        
        db.add(new_workflow_instance)
        db.commit()
        db.refresh(new_workflow_instance)
        
        logger.info(f"‚úÖ Workflow {workflow.name} ajout√© avec succ√®s pour {current_user['username']}")
        
        return {
            "id": new_workflow_instance.id,
            "name": new_workflow_instance.name,
            "workflow": {
                "id": workflow.id,
                "name": workflow.name,
                "description": workflow.description,
                "category": workflow.category,
                "folder_name": workflow.folder_name
            },
            "is_active": new_workflow_instance.is_active,
            "created_at": new_workflow_instance.created_at.isoformat(),
            "last_executed": new_workflow_instance.last_executed.isoformat() if new_workflow_instance.last_executed else None
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ajout du workflow: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de l'ajout du workflow"
        )

@router.post("/{instance_id}/run")
async def run_my_team_instance(
    instance_id: UUID,
    input_data: CrewInput,
    current_user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Ex√©cute une instance d'√©quipe CrewAI de l'utilisateur.

    Args:
        instance_id: ID de l'instance d'√©quipe √† ex√©cuter
        input_data: Donn√©es d'entr√©e pour le CrewAI (ex: {"topic": "AI trends"})
        current_user: Utilisateur connect√©
        db: Session de base de donn√©es

    Returns:
        R√©sultat de l'ex√©cution du CrewAI

    Raises:
        HTTPException: Si l'instance n'est pas trouv√©e ou n'appartient pas √† l'utilisateur
    """
    try:
        logger.info(f"üöÄ Utilisateur {current_user['username']} ex√©cute l'instance {instance_id}")
        
        # V√©rifier que l'instance appartient √† l'utilisateur
        team_instance = get_team_instance_by_id(db, instance_id, current_user["id"])
        if not team_instance:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Instance d'√©quipe non trouv√©e ou ne vous appartient pas"
            )

        # R√©cup√©rer les d√©tails de l'√©quipe
        crew_details = get_crew_by_id(db, team_instance.crew_id)
        if not crew_details:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="D√©finition d'√©quipe associ√©e non trouv√©e"
            )

        # Pr√©parer l'ex√©cution via CrewExecutorService
        executor_service = CrewExecutorService()
        
        logger.info(f"üéØ Ex√©cution de l'√©quipe {crew_details.folder_name} avec input: {input_data.topic}")
        
        # Ex√©cuter l'√©quipe
        crew_output = await executor_service.execute_crew(
            crew_details.folder_name,
            {"topic": input_data.topic}
        )

        # Mettre √† jour la date de derni√®re ex√©cution
        update_team_instance_execution(db, instance_id, current_user["id"])

        logger.info(f"‚úÖ Ex√©cution termin√©e avec succ√®s pour {current_user['username']}")

        return {
            "success": True,
            "message": "Ex√©cution de l'√©quipe termin√©e avec succ√®s",
            "data": crew_output,
            "team_name": team_instance.name or crew_details.name
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ex√©cution de l'√©quipe {crew_details.folder_name if 'crew_details' in locals() else 'inconnue'}: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"√âchec de l'ex√©cution de l'√©quipe: {str(e)}"
        )

@router.put("/{instance_id}", response_model=TeamInstanceResponse)
async def update_my_team(
    instance_id: UUID,
    team_update: TeamInstanceCreate,
    current_user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Met √† jour une √©quipe de l'utilisateur (nom personnalis√©, etc.)
    """
    try:
        logger.info(f"üîÑ Mise √† jour de l'√©quipe {instance_id} par {current_user['username']}")
        
        # V√©rifier que l'instance existe et appartient √† l'utilisateur
        team_instance = get_team_instance_by_id(db, instance_id, current_user["id"])
        if not team_instance:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Instance d'√©quipe non trouv√©e ou ne vous appartient pas"
            )
        
        # Mettre √† jour le nom personnalis√©
        team_instance.name = team_update.name
        db.commit()
        db.refresh(team_instance)
        
        logger.info(f"‚úÖ √âquipe {instance_id} mise √† jour avec succ√®s")
        return team_instance
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la mise √† jour: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la mise √† jour"
        )

@router.delete("/{instance_id}")
async def remove_team(
    instance_id: UUID,
    current_user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Supprime une √©quipe des √©quipes de l'utilisateur (d√©sactivation)
    """
    try:
        logger.info(f"üóëÔ∏è Suppression de l'√©quipe {instance_id} par {current_user['username']}")
        
        # V√©rifier que l'instance existe et appartient √† l'utilisateur
        team_instance = get_team_instance_by_id(db, instance_id, current_user["id"])
        if not team_instance:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Instance d'√©quipe non trouv√©e ou ne vous appartient pas"
            )
        
        # D√©sactiver l'instance au lieu de la supprimer
        team_instance.is_active = False
        db.commit()
        
        logger.info(f"‚úÖ √âquipe {instance_id} supprim√©e avec succ√®s")
        return {"message": "√âquipe supprim√©e avec succ√®s"}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la suppression: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la suppression"
        )

@router.delete("/{instance_id}/delete-cloned-workflow")
async def delete_cloned_workflow(
    instance_id: UUID,
    current_user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Supprime compl√®tement un workflow clon√© et nettoie toutes les donn√©es associ√©es
    """
    try:
        logger.info(f"üóëÔ∏è Suppression compl√®te du workflow clon√© {instance_id} par {current_user['username']}")
        
        # V√©rifier que l'instance existe et appartient √† l'utilisateur
        team_instance = get_team_instance_by_id(db, instance_id, current_user["id"])
        if not team_instance:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Instance d'√©quipe non trouv√©e ou ne vous appartient pas"
            )
        
        # V√©rifier que c'est bien un workflow clon√©
        if not team_instance.workflow_id:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Cette instance n'est pas un workflow"
            )
        
        from app.models.workflow import Workflow
        workflow = db.query(Workflow).filter(Workflow.id == team_instance.workflow_id).first()
        if not workflow or workflow.category != "Cloned":
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Ce workflow n'est pas un workflow clon√©"
            )
        
        # Supprimer dans N8N si possible
        try:
            if workflow.n8n_workflow_id:
                from app.services.n8n_executor import N8NExecutorService
                n8n_executor = N8NExecutorService()
                # Try to convert to int, but handle string IDs gracefully
                try:
                    n8n_id = int(workflow.n8n_workflow_id)
                    await n8n_executor.delete_workflow(n8n_id)
                    logger.info(f"‚úÖ Workflow N8N {workflow.n8n_workflow_id} supprim√©")
                except ValueError:
                    logger.warning(f"‚ö†Ô∏è N8N workflow ID '{workflow.n8n_workflow_id}' is not a valid integer, skipping N8N deletion")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la suppression N8N: {e}")
            # Continue m√™me si la suppression N8N √©choue
        
        # Supprimer les ex√©cutions associ√©es
        from app.models.workflow import WorkflowExecution
        db.query(WorkflowExecution).filter(WorkflowExecution.workflow_id == workflow.id).delete()
        
        # Supprimer la TeamInstance
        db.delete(team_instance)
        
        # Supprimer le Workflow clon√©
        db.delete(workflow)
        
        db.commit()
        
        logger.info(f"‚úÖ Workflow clon√© {instance_id} supprim√© compl√®tement")
        return {
            "message": "Workflow clon√© supprim√© avec succ√®s",
            "cleaned_up": {
                "team_instance": True,
                "workflow": True,
                "n8n_workflow": workflow.n8n_workflow_id is not None,
                "executions": True
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la suppression compl√®te: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la suppression compl√®te"
        )

@router.get("/debug/user")
async def debug_current_user(current_user: dict = Depends(get_current_user)):
    """Route de debug pour v√©rifier l'authentification"""
    return {
        "user": current_user, 
        "message": "Authentification OK",
        "user_id": current_user["id"],
        "username": current_user["username"]
    }